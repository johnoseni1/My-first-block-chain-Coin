{
  "name": "sha3",
  "version": "1.2.2",
  "description": "A Node.js C++ extension for SHA-3 (Keccak)",
  "keywords": [
    "sha",
    "sha3",
    "sha-3",
    "hash",
    "hashing"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/phusion/node-sha3.git"
  },
  "main": "build/Release/sha3",
  "scripts": {
    "install": "node-gyp rebuild",
    "test": "python test/generate_tests.py > test/test_vectors.js && node test/test_vectors.js && mocha test/unit_tests.js"
  },
  "gypfile": true,
  "directories": {
    "test": "test"
  },
  "author": {
    "name": "Hongli Lai",
    "email": "hongli@phusion.nl",
    "url": "Phusion"
  },
  "license": "MIT",
  "dependencies": {
    "nan": "2.10.0"
  },
  "devDependencies": {
    "mocha": "5.1.1"
  },
  "readme": "# A Node.js C++ extension for SHA-3 (Keccak)\n\n[![Travis CI][3]][4]\n[![npm version][5]][6]\n[![npm downloads][7]][6]\n[![dependencies][8]][9]\n[![devDependencies][10]][9]\n[![license][11]][12]\n\nThis Node.js extension implements the SHA-3 ([Keccak][1]) cryptographic hashing algorithm. It is based on the reference C implementation, version 3.2. The exposed interface is almost identical to that of the `crypto` standard library.\n\n[![Phusion][13]][2]\n\n## Installation\n\nVia `npm`:\n\n```bash\n$ npm install sha3\n```\n\nVia `yarn`:\n\n```bash\n$ yarn add sha3\n```\n\n## Usage\n\nKeccak supports 5 hash lengths: 224-bit, 256-bit, 384-bit, 512-bit and variable length. Variable length is not supported by this Node.js extension. Unless the user specifies otherwise, this Node.js extension assumes 512-bit.\n\n```javascript\nconst SHA3 = require('sha3');\n\n// Generate 512-bit digest.\nlet d = new SHA3.SHA3Hash();\nd.update('foo');\nd.digest('hex');\n// => \"1597842a...\"\n\n// Generate 224-bit digest.\nd = new SHA3.SHA3Hash(224);\nd.update('foo');\nd.digest('hex');\n// => \"daa94da7...\"\n```\n\n### new SHA3Hash([hashlen])\n\nThis is the hash object. `hashlen` is 512 by default.\n\n### hash.update(data, [input_encoding])\n\nUpdates the hash content with the given data, the encoding of which is given in `input_encoding` and can be `'utf8'`, `'ascii'` or `'binary'`. Defaults to `'binary'`. This can be called many times with new data as it is streamed.\n\n### hash.digest([encoding])\n\nCalculates the digest of all of the passed data to be hashed. The encoding can be `'hex'` or `'binary'`. Defaults to `'binary'`.\n\nNote: unlike `crypto.Hash`, a `SHA3Hash` object _can_ still be used after the `digest()` method been called.\n\n## Running the test suite\n\nRun the test suite as follows:\n\n```bash\n$ npm test\n```\n\nThe test suite is automatically generated from Keccak's reference test suite.\nIt requires that you have Python 2.7 installed and available via the\n`python` executable.\n\n## Warning\n\nDo not use SHA-3 for hashing passwords. Do not even use SHA-3 + salt for hashing passwords. Use a [slow hash][14] instead.\n\n## See also\n\n[Digest::SHA3 for Ruby](https://github.com/phusion/digest-sha3-ruby)\n\n[1]: https://keccak.team/keccak.html\n[2]: https://www.phusion.nl/\n[3]: https://img.shields.io/travis/phusion/node-sha3/master.svg?label=Travis%20CI\n[4]: https://travis-ci.org/phusion/node-sha3\n[5]: https://img.shields.io/npm/v/sha3.svg\n[6]: https://www.npmjs.com/package/sha3\n[7]: https://img.shields.io/npm/dt/sha3.svg\n[8]: https://img.shields.io/david/phusion/node-sha3.svg\n[9]: https://github.com/phusion/node-sha3/blob/master/package.json\n[10]: https://img.shields.io/david/dev/phusion/node-sha3.svg\n[11]: https://img.shields.io/github/license/phusion/node-sha3.svg\n[12]: https://github.com/phusion/node-sha3/blob/master/LICENSE\n[13]: https://www.phusion.nl/images/header/pinwheel_logo.svg\n[14]: http://codahale.com/how-to-safely-store-a-password/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/phusion/node-sha3/issues"
  },
  "_id": "sha3@1.2.2",
  "_from": "sha3@^1.1.0"
}
